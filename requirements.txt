# Cursor IDE Prompt - Fix MCP Setup for RBC Assessment

**Copy and paste this prompt directly into Cursor IDE:**

---

## Task: Fix MCP Integration for RBC Technical Assessment

I need to fix my MCP (Model Context Protocol) setup to meet the RBC assessment requirements. The basic REST API is already working - I just need the MCP layer to demonstrate AI agent integration.

## Current Issues:
1. TypeScript import errors with MCP SDK
2. Type errors with API response handling
3. Need to keep implementation simple but professional

## Assessment Requirements (5-8 hours total):
- ✅ REST API is complete (already done)
- ⏳ MCP integration to show AI agent understanding
- ⏳ 3 essential MCP tools that call my existing API
- ⏳ Natural language query processing
- ⏳ Structured responses for LLM consumption

## What I Need You to Fix:

### 1. MCP SDK Import Issues
Fix these import errors in `src/mcp/server.ts`:
```typescript
// Currently failing:
import { Server } from '@modelcontextprotocol/sdk/server/index.js';
import { StdioServerTransport } from '@modelcontextprotocol/sdk/server/stdio.js';
```
Use the correct MCP SDK import paths that actually work.

### 2. TypeScript Response Handling
Fix the "unknown" type errors when calling my existing API:
```typescript
// Currently failing:
const data = await response.json(); // 'data' is of type 'unknown'
if (!data.success) { // Error here
```
Add proper type handling without over-engineering.

### 3. Create 3 Essential MCP Tools
Create exactly these tools that call my existing REST API endpoints:

**Tool 1:** `natural_language_query` 
- Accepts: `{ prompt: string }` (e.g., "Show Bob's overdue tasks")
- Calls: My existing `/api/tasks` endpoints with filters
- Returns: Structured JSON for LLM

**Tool 2:** `workload_analysis`
- Accepts: `{ assignee: string }`
- Calls: My existing `/api/workload/{assignee}` endpoint
- Returns: Workload analysis with insights

**Tool 3:** `risk_assessment`
- Accepts: `{ projectId: string }`
- Calls: My existing `/api/projects/{projectId}/risk` endpoint
- Returns: Risk analysis with recommendations

### 4. Simple Prompt Processing
Add basic natural language processing that can:
- Extract person names from queries (e.g., "Bob" from "Show Bob's tasks")
- Detect "overdue" keyword to filter tasks
- Route to appropriate API endpoints
- NO complex NLP libraries - just regex patterns

### 5. API Integration Pattern
Use this pattern for calling my existing REST API:
```typescript
const apiUrl = process.env.API_BASE_URL || 'http://localhost:3000';
const response = await fetch(`${apiUrl}/api/your-endpoint`);
// Handle response with proper types
```

## Code Quality Requirements:
- ✅ Use TypeScript with proper types (but keep simple)
- ✅ Add error handling for API calls
- ✅ Structure responses for LLM consumption
- ✅ Include console logging for debugging
- ❌ Don't over-engineer with complex patterns
- ❌ Don't add caching, retry logic, or other advanced features
- ❌ Keep it assessment-appropriate (2-3 hours of MCP work max)

## Expected File Structure:
```
src/mcp/
├── server.ts          # MCP server setup with correct imports
├── tools.ts           # 3 MCP tools implementation
└── types.ts           # Basic type definitions
```

## Testing Requirements:
After fixing, I should be able to:
1. `npm run build` without TypeScript errors
2. `node dist/mcp/server.js` starts successfully
3. `npx @modelcontextprotocol/inspector node dist/mcp/server.js` for testing
4. Test queries like "Show me Bob's overdue tasks" work

## Assessment Focus:
This is for a senior backend engineer position at RBC. Show:
- ✅ Clean, professional code structure
- ✅ Proper TypeScript usage
- ✅ Understanding of AI agent integration
- ✅ Good error handling practices
- ❌ Don't show over-engineering for a 5-8 hour assessment

## Current Tech Stack:
- Node.js + TypeScript
- Express.js REST API (working)
- PostgreSQL + Prisma (working)
- MCP SDK for agent integration (needs fixing)

Please fix the MCP setup focusing on getting it working cleanly rather than adding advanced features. The goal is to demonstrate understanding of AI agent integration patterns for the technical assessment.

---

**Priority: Fix imports → Fix types → Create 3 working tools → Test with MCP Inspector**